# server/microservices/flightService/serverless.yml
# Serverless configuration for the flight-service microservice

# Define the service name and provider details
service: flight-service
provider:
  name: aws
  runtime: python3.11  # Choose the runtime compatible with your application
  stage: dev
  region: us-east-1
  environment:
    # Define environment variables, including the Skyscanner API key
    SKYSCANNER_API_KEY: ${env:SKYSCANNER_API_KEY}
  iamRoleStatements:
    # Define IAM role statements for function permissions
    - Effect: "Allow"
      Action:
        - "execute-api:Invoke"
        - "lambda:InvokeFunction"
      Resource: "*"

# Define functions and their respective HTTP events
functions:
  createSearch:
    # Define handler function for creating flight searches
    handler: handler.create_search
    events:
      # Define HTTP event for creating flight searches
      - http:
          path: flights/search/create
          method: post
          cors: true  # Enable CORS for this endpoint
          # Add detailed explanation of this event's purpose and configuration options
  pollSearch:
    # Define handler function for polling flight search results
    handler: handler.poll_search
    events:
      # Define HTTP event for polling flight search results
      - http:
          path: flights/search/poll/{sessionToken}
          method: get
          cors: true  # Enable CORS for this endpoint
          # Add detailed explanation of this event's purpose and configuration options

# Define plugins used in the Serverless deployment process
plugins:
  # Use the serverless-python-requirements plugin to manage Python dependencies
  - serverless-python-requirements

# Define custom configuration options
custom:
  pythonRequirements:
    dockerizePip: non-linux  # Specify Dockerization option for Python requirements installation
